# SPDX-FileCopyrightText: 2024 Ryan Cao <hello@ryanccn.dev>
#
# SPDX-License-Identifier: AGPL-3.0-only

name: Docker

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        include:
          - arch: x86_64
            runner: ubuntu-24.04
          - arch: aarch64
            runner: ubuntu-24.04-arm

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # ratchet:actions/checkout@v5
        with:
          persist-credentials: false

      - name: Install Nix
        uses: cachix/install-nix-action@fd24c48048070c1be9acd18c9d369a83f0fe94d7 # ratchet:cachix/install-nix-action@v31

      - name: Build Docker image
        id: image
        run: |
          nix build -L .#docker-image-${{ matrix.arch }}
          [ ! -L result ] && exit 1
          echo "path=$(realpath result)" >> "$GITHUB_OUTPUT"

      - name: Upload image
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # ratchet:actions/upload-artifact@v4
        with:
          name: docker-image-${{ matrix.arch }}
          path: ${{ steps.image.outputs.path }}
          if-no-files-found: error
          retention-days: 1

  push:
    needs: build
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    permissions:
      packages: write

    if: github.event_name == 'push'

    steps:
      - uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # ratchet:actions/download-artifact@v5
        with:
          path: images

      - name: Log in to registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # ratchet:docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Push to registry
        env:
          DOCKER_TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        run: |
          set -eux

          architectures=("x86_64" "aarch64")
          for arch in "${architectures[@]}"; do
            docker load < images/docker-image-"$arch"/*.tar.gz
            docker tag "valfisk:latest-$arch" "$DOCKER_TAG-$arch"
            docker push "$DOCKER_TAG-$arch"
          done

          docker manifest create "$DOCKER_TAG" \
            --amend "$DOCKER_TAG-x86_64" \
            --amend "$DOCKER_TAG-aarch64"

          docker manifest push "$DOCKER_TAG"
