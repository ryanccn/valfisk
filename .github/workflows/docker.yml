# SPDX-FileCopyrightText: 2024 Ryan Cao <hello@ryanccn.dev>
#
# SPDX-License-Identifier: AGPL-3.0-only

name: Docker

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  build:
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        include:
          - arch: x86_64
            runner: ubuntu-24.04
          - arch: aarch64
            runner: ubuntu-24.04-arm

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          persist-credentials: false

      - name: Install Nix
        uses: cachix/install-nix-action@526118121621777ccd86f79b04685a9319637641 # ratchet:cachix/install-nix-action@v31

      - name: Build Docker image
        id: image
        run: |
          nix build -L .#container-${{ matrix.arch }}
          [ ! -L result ] && exit 1
          echo "path=$(realpath result)" >> "$GITHUB_OUTPUT"

      - name: Upload image
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # ratchet:actions/upload-artifact@v4
        with:
          name: container-${{ matrix.arch }}
          path: ${{ steps.image.outputs.path }}
          if-no-files-found: error
          retention-days: 1

  push:
    needs: build
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    permissions:
      packages: write

    if: github.event_name == 'push'

    steps:
      - uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # ratchet:actions/download-artifact@v4
        with:
          path: images

      - name: Log in to registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # ratchet:docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Push to registry
        env:
          DOCKER_TAG: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        run: |
          set -eux

          architectures=("x86_64" "aarch64")
          for arch in "${architectures[@]}"; do
            docker load < images/container-"$arch"/*.tar.gz
            docker tag "valfisk:latest-$arch" "$DOCKER_TAG-$arch"
            docker push "$DOCKER_TAG-$arch"
          done

          docker manifest create "$DOCKER_TAG" \
            --amend "$DOCKER_TAG-x86_64" \
            --amend "$DOCKER_TAG-aarch64"

          docker manifest push "$DOCKER_TAG"
